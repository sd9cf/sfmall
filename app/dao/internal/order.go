// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// OrderDao is the manager for logic model data accessing and custom defined data operations functions management.
type OrderDao struct {
	Table   string       // Table is the underlying table name of the DAO.
	Group   string       // Group is the database configuration group name of current DAO.
	Columns OrderColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// OrderColumns defines and stores column names for table order.
type OrderColumns struct {
	Id          string // 订单id
	ProductItem string // 商品项
	TotalPrice  string // 合计
	Status      string // 订单状态
	AddressId   string // 地址id
	UserId      string // 用户id
	NickName    string // 用户昵称
	Created     string // 创建时间
	Updated     string // 更新时间
}

//  orderColumns holds the columns for table order.
var orderColumns = OrderColumns{
	Id:          "id",
	ProductItem: "product_item",
	TotalPrice:  "total_price",
	Status:      "status",
	AddressId:   "address_id",
	UserId:      "user_id",
	NickName:    "nick_name",
	Created:     "created",
	Updated:     "updated",
}

// NewOrderDao creates and returns a new DAO object for table data access.
func NewOrderDao() *OrderDao {
	return &OrderDao{
		Group:   "default",
		Table:   "order",
		Columns: orderColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OrderDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OrderDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OrderDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
