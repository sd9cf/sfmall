// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// AddressDao is the manager for logic model data accessing and custom defined data operations functions management.
type AddressDao struct {
	Table   string         // Table is the underlying table name of the DAO.
	Group   string         // Group is the database configuration group name of current DAO.
	Columns AddressColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// AddressColumns defines and stores column names for table address.
type AddressColumns struct {
	Id              string // 地址id
	UserId          string // 用户id
	Name            string // 收货人姓名
	Mobile          string // 手机号
	PostalCode      string // 邮政编码
	Province        string // 省
	City            string // 城市
	District        string // 区/县
	DetailedAddress string // 详细地址
	IsDefault       string // 1为默认，0为非默认
	Created         string // 创建时间
	Updated         string // 更新时间
}

//  addressColumns holds the columns for table address.
var addressColumns = AddressColumns{
	Id:              "id",
	UserId:          "user_id",
	Name:            "name",
	Mobile:          "mobile",
	PostalCode:      "postal_code",
	Province:        "province",
	City:            "city",
	District:        "district",
	DetailedAddress: "detailed_address",
	IsDefault:       "is_default",
	Created:         "created",
	Updated:         "updated",
}

// NewAddressDao creates and returns a new DAO object for table data access.
func NewAddressDao() *AddressDao {
	return &AddressDao{
		Group:   "default",
		Table:   "address",
		Columns: addressColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AddressDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AddressDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AddressDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
