// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// ProductDao is the manager for logic model data accessing and custom defined data operations functions management.
type ProductDao struct {
	Table   string         // Table is the underlying table name of the DAO.
	Group   string         // Group is the database configuration group name of current DAO.
	Columns ProductColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// ProductColumns defines and stores column names for table product.
type ProductColumns struct {
	Id                string // 商品编号
	CategoryId        string // 类目编号
	Title             string // 商品标题
	Description       string // 商品描述
	Price             string // 商品价格
	Amount            string // 商品数量
	Sales             string // 商品销量
	MainImage         string // 商品主图
	Delivery          string // 商品发货
	Assurance         string // 商品保障
	Name              string // 商品名称
	Weight            string // 商品重量
	Brand             string // 商品品牌
	Origin            string // 商品产地
	ShelfLife         string // 商品保质期
	NetWeight         string // 商品净含量
	UseWay            string // 使用方式
	PackingWay        string // 包装方式
	StorageConditions string // 存储条件
	DetailImage       string // 详情图片
	Status            string // 商品状态
	Created           string // 创建时间
	Updated           string // 更新时间
}

//  productColumns holds the columns for table product.
var productColumns = ProductColumns{
	Id:                "id",
	CategoryId:        "category_id",
	Title:             "title",
	Description:       "description",
	Price:             "price",
	Amount:            "amount",
	Sales:             "sales",
	MainImage:         "main_image",
	Delivery:          "delivery",
	Assurance:         "assurance",
	Name:              "name",
	Weight:            "weight",
	Brand:             "brand",
	Origin:            "origin",
	ShelfLife:         "shelf_life",
	NetWeight:         "net_weight",
	UseWay:            "use_way",
	PackingWay:        "packing_way",
	StorageConditions: "storage_conditions",
	DetailImage:       "detail_image",
	Status:            "status",
	Created:           "created",
	Updated:           "updated",
}

// NewProductDao creates and returns a new DAO object for table data access.
func NewProductDao() *ProductDao {
	return &ProductDao{
		Group:   "default",
		Table:   "product",
		Columns: productColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ProductDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ProductDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ProductDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
